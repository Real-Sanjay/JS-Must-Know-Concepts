 Destructuring 

ðŸ”¹ What is Destructuring?
Destructuring allows you to extract values from arrays and objects easily and assign them to variables. It makes the code cleaner and more readable.

ðŸ”¹ Array Destructuring
 Extract values from an array into variables

code
const numbers = [10, 20, 30];

// Without destructuring
const a = numbers[0];
const b = numbers[1];

// With destructuring
const [x, y, z] = numbers;

console.log(x); //  10
console.log(y); //  20
console.log(z); //  30

Skipping Values
code
const nums = [100, 200, 300, 400];

// Skip the second value
const [first, , third] = nums;

console.log(first);  //  100
console.log(third);  //  300

Using Default Values

code
const values = [5];

// Assign default value if undefined
const [a = 10, b = 20] = values;

console.log(a); //  5
console.log(b); // 20 (default value)

ðŸ”¹ Object Destructuring
Extract values from an object into variables

code
const user = { name: "Alice", age: 25, city: "Paris" };

// Without destructuring
const name1 = user.name;
const age1 = user.age;

// With destructuring
const { name, age, city } = user;

console.log(name); //  Alice
console.log(age);  //  25
console.log(city); //  Paris

Using Default Values

code
const person = { name: "Bob", age: 30 };

// Assign default value if property is missing
const { name, age, country = "Unknown" } = person;

console.log(name);    //  Bob
console.log(country); //  Unknown (default value)

Renaming Variables
code
const user = { fullName: "Alice Johnson", age: 28 };

// Renaming properties while destructuring
const { fullName: name, age: userAge } = user;

console.log(name);    // Alice Johnson
console.log(userAge); // 28


ðŸ”¹ Destructuring in Function Parameters
 Pass an object and extract values directly inside function parameters

code
const displayUser = ({ name, age }) => {
    console.log(`Name: ${name}, Age: ${age}`);
};

const user = { name: "Charlie", age: 35 };
displayUser(user); 
// Output: Name: Charlie, Age: 35

 Using Default Values in Function Parameters

code
const greet = ({ name = "Guest" }) => {
    console.log(`Hello, ${name}!`);
};

greet({ name: "Alice" }); //  Hello, Alice!
greet({});               //  Hello, Guest!

ðŸ”¹ Nested Destructuring
Extract values from nested objects

code
const person = {
    name: "David",
    address: {
        city: "New York",
        zip: 10001
    }
};

// Destructuring nested object
const { address: { city, zip } } = person;

console.log(city); //  New York
console.log(zip);  //  10001
Extract values from nested arrays

code
const colors = [["red", "green"], ["blue", "yellow"]];

// Extract first color from each sub-array
const [[firstColor], [, secondColor]] = colors;

console.log(firstColor);  //  red
console.log(secondColor); //  yellow


 Summary
 Destructuring simplifies extracting values from arrays and objects
 Works in function parameters for cleaner code
 Supports default values, renaming, and nested structures