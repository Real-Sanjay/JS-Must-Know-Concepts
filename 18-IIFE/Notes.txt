IIFE (Immediately Invoked Function Expression) in JavaScript
üîπ What is an IIFE?
An Immediately Invoked Function Expression (IIFE) is a JavaScript function that executes immediately after being defined.

Syntax
(function () {
    console.log("This function runs immediately!");
})();

The function is wrapped in parentheses ( ... ) and is immediately invoked using ();.

üîπ Why Use an IIFE?
1Ô∏è‚É£ Avoid polluting the global scope
2Ô∏è‚É£ Create a private scope for variables
3Ô∏è‚É£ Execute code immediately
4Ô∏è‚É£ Useful in module patterns & async operations


1Ô∏è‚É£ Basic IIFE Example
code
(function () {
    console.log("IIFE executed!");
})(); 
üîπ Output: "IIFE executed!"

The function runs immediately without needing an explicit call.

2Ô∏è‚É£ IIFE with Parameters
code
(function (name) {
    console.log(`Hello, ${name}!`);
})("Alice");
üîπ Output: "Hello, Alice!"

The IIFE takes "Alice" as an argument and executes.

3Ô∏è‚É£ IIFE with Return Value
code
const user = (function () {
    let name = "Bob";
    return {
        getName: function () {
            return name;
        },
    };
})();
console.log(user.getName()); //  "Bob"
 The IIFE returns an object that provides access to the private variable name.

4Ô∏è‚É£ Using IIFE for Private Variables (Encapsulation)
üîπ Scenario: Prevent variables from leaking into the global scope.

code
(function () {
    let apiKey = "123456"; // Private variable
    console.log(`API Key: ${apiKey}`);
})();

console.log(apiKey); //  ReferenceError: apiKey is not defined
Why? apiKey is inside the IIFE scope and not accessible globally.

5Ô∏è‚É£ IIFE with Arrow Function
code
(() => {
    console.log("Arrow function IIFE!");
})();
üîπ Output: "Arrow function IIFE!"
Same behavior, but using ES6 arrow functions.

6Ô∏è‚É£ Asynchronous IIFE (Async/Await in IIFE)
üîπ Scenario: Fetch data immediately when the script runs.

code
(async function () {
    const response = await fetch("https://jsonplaceholder.typicode.com/users/1");
    const user = await response.json();
    console.log(`User fetched: ${user.name}`);
})();
 This avoids using an extra function and fetches data immediately.

7Ô∏è‚É£ IIFE in Real-World Project Scenarios
 E-commerce Website: Cart Management
code
const Cart = (function () {
    let items = []; // Private variable

    return {
        addItem: function (item) {
            items.push(item);
            console.log(`Added ${item} to cart.`);
        },
        getItems: function () {
            return items;
        }
    };
})();

Cart.addItem("Shoes"); //  "Added Shoes to cart."
console.log(Cart.getItems()); //  ["Shoes"]
Encapsulation: items is private, and we expose only necessary methods.


 Key Takeaways
1Ô∏è‚É£ IIFE runs immediately after definition
2Ô∏è‚É£ Helps avoid global variable pollution
3Ô∏è‚É£ Useful for private variables & module patterns
4Ô∏è‚É£ Can accept parameters & return values
5Ô∏è‚É£ Works with async/await for immediate API calls