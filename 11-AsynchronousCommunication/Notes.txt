Asynchronous Communication in JavaScript
Asynchronous communication is one of the most important concepts in JavaScript, especially when dealing with APIs, databases, or timers. 

🔹 What is Asynchronous Communication?
JavaScript is single-threaded, meaning it can execute only one task at a time.
But real-world applications need to:
- Fetch data from an API
- Read/write files
- Wait for user input
- Handle timers

To prevent blocking the execution, JavaScript uses asynchronous communication.

🔹 Synchronous vs Asynchronous Execution
1️⃣ Synchronous Execution (Blocking)
code
console.log("Start");
for (let i = 0; i < 1e9; i++) {} // Simulates a time-consuming task
console.log("End");
 This blocks execution until the loop completes, making the page unresponsive.

2️⃣ Asynchronous Execution (Non-Blocking)
code
console.log("Start");

setTimeout(() => {
    console.log("Asynchronous Task Done!");
}, 2000);

console.log("End");

✔️ The callback inside setTimeout executes later, keeping the program responsive.

🔹 Ways to Handle Asynchronous Code
There are three main ways to handle asynchronous operations:

1️⃣ Callbacks
2️⃣ Promises
3️⃣ Async/Await
1️⃣ Callbacks – The Old Way
A callback is a function passed as an argument to another function, which gets executed later.

code
function fetchData(callback) {
    setTimeout(() => {
        callback("Data received!");
    }, 2000);
}

fetchData((data) => {
    console.log(data);
});
✔️ The callback ensures data is printed only after fetching is complete.


Problem with Callbacks:

Callback Hell (Nested Callbacks)
Difficult to Read & Maintain
code
function step1(callback) {
    setTimeout(() => {
        console.log("Step 1 completed");
        callback();
    }, 1000);
}

function step2(callback) {
    setTimeout(() => {
        console.log("Step 2 completed");
        callback();
    }, 1000);
}

function step3(callback) {
    setTimeout(() => {
        console.log("Step 3 completed");
        callback();
    }, 1000);
}

// Callback Hell 😭
step1(() => {
    step2(() => {
        step3(() => {
            console.log("All steps completed");
        });
    });
});

2️⃣ Promises – The Modern Approach
A Promise is an object that represents a value that may be available now, later, or never.
It has three states:
Pending – Initial state
Resolved (Fulfilled) – Operation successful
Rejected – Operation failed

code
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Data received!");
        }, 2000);
    });
}

// Using .then() and .catch()
fetchData()
    .then((data) => console.log(data))
    .catch((error) => console.error(error));
✔️ This removes callback hell by using .then() and .catch().

3️⃣ Async/Await – The Best Approach
Async/Await makes asynchronous code look synchronous, improving readability.

code
function fetchData() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve("Data received!");
        }, 2000);
    });
}

async function getData() {
    console.log("Fetching data...");
    const data = await fetchData();
    console.log(data);
}

getData();
Output:

Fetching data...
(Data received after 2s)
✔️ await pauses execution until fetchData() resolves.

🔹 Real-World Example – Fetch API
Fetching data from an API using Async/Await:

code
async function getUserData() {
    try {
        let response = await fetch("https://jsonplaceholder.typicode.com/users/1");
        let user = await response.json();
        console.log(user);
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}

getUserData();
✔️ No nested callbacks!
✔️ Easier to read & maintain!

🔹 The Event Loop – How Async Works Internally
JavaScript handles async tasks using the Event Loop.

 Execution Flow
1️⃣ Call Stack – Executes synchronous code
2️⃣ Web APIs – Handles async tasks like setTimeout, fetch, DOM events
3️⃣ Task Queue & Microtask Queue – Stores async callbacks
4️⃣ Event Loop – Moves completed tasks back to the Call Stack

🔹 Microtasks (Promises) run before Macrotasks (setTimeout)

code
console.log("Start");

setTimeout(() => console.log("Timeout"), 0);
Promise.resolve().then(() => console.log("Promise"));

console.log("End");
Output:


Promise
Timeout
✔️ Promise executes first! (Microtask Queue has higher priority)

🔹 Key Takeaways
✔️ JavaScript is single-threaded but uses async to stay responsive
✔️ Callbacks → Old & leads to Callback Hell
✔️ Promises → Better than callbacks, uses .then() & .catch()
✔️ Async/Await → The cleanest and most readable way
✔️ Event Loop ensures async tasks don’t block execution