Scope in JavaScript
Scope determines where variables can be accessed in a program. JavaScript has three main types of scope:

1Ô∏è‚É£ Global Scope
2Ô∏è‚É£ Function (Local) Scope
3Ô∏è‚É£ Block Scope (introduced in ES6)


1Ô∏è‚É£ Global Scope
Definition:
A variable declared outside of any function or block is global.
It can be accessed anywhere in the program.
Example (Real-World Scenario: Config Settings in a Web App)
code
const API_URL = "https://example.com/api"; // Global scope

function fetchData(endpoint) {
    console.log(`Fetching data from: ${API_URL}/${endpoint}`);
}

fetchData("users"); // ‚úÖ Accessible anywhere
console.log(API_URL); // ‚úÖ Works globally
 The problem with global variables: They stay in memory and can be overwritten by mistake.
üîπ Best Practice: Use const to avoid accidental changes.

2Ô∏è‚É£ Function Scope (Local Scope)
Definition:`
Variables declared inside a function are only available inside that function.
Cannot be accessed outside.
Example (Real-World Scenario: Local Variables in an API Request)
code
function fetchUserData(userId) {
    let endpoint = `https://example.com/users/${userId}`; // Function-scoped variable
    console.log(`Fetching from: ${endpoint}`);
}

fetchUserData(101);
console.log(endpoint); // ‚ùå ReferenceError: endpoint is not defined
 Why? endpoint is local to fetchUserData() and cannot be accessed outside.

üîπ Best Practice: Keep variables inside functions unless you need them globally.

3Ô∏è‚É£ Block Scope (let and const)
Definition:
Variables declared with let and const are block-scoped.
They are only accessible inside the {} block they are declared in.
Example (Real-World Scenario: Loop Variables)
code
for (let i = 0; i < 3; i++) {
    console.log(`Iteration: ${i}`); // ‚úÖ Accessible inside loop
}
console.log(i); // ‚ùå ReferenceError: i is not defined (because of block scope)
 If we used var instead of let, i would be accessible outside the loop!

4Ô∏è‚É£ Scope & Closures
Variables in an outer function‚Äôs scope can be accessed by an inner function.
This concept is called Closures (which we already covered).

Example (Real-World Scenario: Private Data in a Function)
code
function counter() {
    let count = 0; // Function scope

    return function () {
        count++;
        console.log(`Count: ${count}`);
    };
}

const increment = counter();
increment(); // Count: 1
increment(); // Count: 2

console.log(count); // ‚ùå ReferenceError: count is not defined

5Ô∏è‚É£ var vs let vs const in Scope
Feature	       var	   let	   const
Scope	    Function   Block	Block
Redeclaration Allowed  Error	Error
Reassignment  Allowed  Allowed	Not Allowed
Hoisted?	Yes (but undefined) Yes (but not initialized) Yes (but not initialized)
Example: var Scope Issue
code
if (true) {
    var a = 10; 
}
console.log(a); //  10 (Because `var` is NOT block-scoped)

if (true) {
    let b = 20;
}
console.log(b); // ‚ùå ReferenceError (Because `let` is block-scoped)
 Best Practice: Always use let or const instead of var.

6Ô∏è‚É£ Hoisting & Scope
Hoisting means variable declarations are moved to the top of their scope.

Example: Hoisting in var vs let
code
console.log(x); // ‚úÖ undefined (var is hoisted but not initialized)
var x = 5;

console.log(y); // ‚ùå ReferenceError (let is hoisted but not initialized)
let y = 10;
üîπ Best Practice: Always declare variables at the top of their scope to avoid hoisting issues.

Key points about hoisting:
Declarations are hoisted, not initializations:
While the declaration of a var variable is hoisted, its assignment (initialization) remains in place. This can lead to undefined values if you try to access the variable before its assignment.

let and const variables are also hoisted but have a Temporal Dead Zone (TDZ):
Unlike var, let and const variables cannot be accessed before their declaration in the code. Attempting to do so will result in a ReferenceError, as they are in a TDZ until their declaration is encountered.

Function declarations are fully hoisted:
This means you can call a function declared with the function keyword before its definition in the code.
Function expressions are not fully hoisted:
If a function is assigned to a variable, only the variable declaration is hoisted, not the function itself.
Example:

// Variable Hoisting with 'var'
console.log(myVar); // Output: undefined
var myVar = "Hello";
console.log(myVar); // Output: Hello

// Variable Hoisting with 'let' (Temporal Dead Zone)
// console.log(myLetVar); // This would cause a ReferenceError
let myLetVar = "World";

// Function Hoisting
greet(); // Output: Hi there!
function greet() {
  console.log("Hi there!");
}

// Function Expression (not fully hoisted)
// sayHello(); // This would cause a TypeError (sayHello is not a function)
var sayHello = function() {
  console.log("Hello from function expression!");
};
sayHello(); // Output: Hello from function expression!