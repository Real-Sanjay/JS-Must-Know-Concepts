1Ô∏è‚É£ Convert this normal function into an arrow function:
function add(a, b) {
  return a + b;
}

2Ô∏è‚É£ Write an arrow function that squares a number:
// Example: square(4) ‚Üí 16

3Ô∏è‚É£ Write an arrow function that takes no arguments and returns "Hello Arrow!".

4Ô∏è‚É£ Write an arrow function that implicitly returns an object:
// Example: createUser("Alice") ‚Üí { name: "Alice", isActive: true }

5Ô∏è‚É£ Convert this function to an arrow function and see what it prints:
function greet(name) {
  return `Hello, ${name}!`;
}

6Ô∏è‚É£ No own this:
Create an object with a method that uses both:
a normal function
an arrow function


const person = {
  name: "Alice",
  normalFn: function() { /* print this.name */ },
  arrowFn: () => { /* print this.name */ }
};
Call both methods and explain the difference.

7Ô∏è‚É£ Arrow functions can‚Äôt be constructors:
What happens here? Why?
const User = (name) => { this.name = name; };
const u = new User("Alice");

8Ô∏è‚É£ No arguments in arrow functions:
Test this:
const arrowArgs = () => console.log(arguments);
arrowArgs(1, 2, 3);
Explain what happens and why.

9Ô∏è‚É£ Implicit return pitfalls:
Why does this code return undefined?

const makeUser = (name) => { name: name };
console.log(makeUser("Bob"));
 Fix it.

üîü Arrow function with default parameters:
Write an arrow function greet that takes a name (default: "Guest") and returns Hello, <name>.

1Ô∏è‚É£1Ô∏è‚É£ Arrow function inside setTimeout
What does this print and why?


const obj = {
  count: 0,
  incrementLater: function() {
    setTimeout(() => {
      this.count++;
      console.log(this.count);
    }, 1000);
  }
};
obj.incrementLater();
1Ô∏è‚É£2Ô∏è‚É£ Using arrow in map/filter
Write an arrow function that doubles each number in an array:


const nums = [1, 2, 3, 4];
1Ô∏è‚É£3Ô∏è‚É£ Returning an object from an arrow in map
Write an arrow function to transform this array:


const names = ["Alice", "Bob"];
// Expected: [{name: "Alice"}, {name: "Bob"}]
1Ô∏è‚É£4Ô∏è‚É£ Arrow function & this in event listeners
Explain why the following might not work as expected:


button.addEventListener("click", () => {
  this.classList.toggle("active");
});
 How would you fix it?

1Ô∏è‚É£5Ô∏è‚É£ Arrow function IIFE (Immediately Invoked Function Expression)
Write an arrow function that immediately runs and logs "Arrow IIFE!".

1Ô∏è‚É£6Ô∏è‚É£ Arrow function in reduce()
Write an arrow function that sums up numbers in an array using .reduce().