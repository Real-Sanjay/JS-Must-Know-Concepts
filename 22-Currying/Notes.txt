Currying in JavaScript
ðŸ”¹ What is Currying?
Currying is a functional programming technique where a function is transformed into a sequence of functions, each taking a single argument. Instead of calling a function with multiple arguments at once, you call a series of functions, each with one argument.

 Syntax Example:

code
function add(a) {
  return function (b) {
    return a + b;
  };
}

console.log(add(2)(3)); //  5

The function add(2)(3) is curried, meaning add(2) returns another function that takes b as an argument.

ðŸ”¹ Why Use Currying?
Reusability â€“ You can create more specific versions of a function.
Avoids Repetition â€“ Useful in scenarios where you apply a function multiple times with partial arguments.
Improves Readability â€“ Helps in creating cleaner function calls.
Useful for Functional Programming â€“ Many functional libraries like Lodash use currying.

ðŸ”¹ How Currying Works (Step-by-Step Flow)
Let's analyze the following example:

code
function multiply(a) {
  return function (b) {
    return function (c) {
      return a * b * c;
    };
  };
}

console.log(multiply(2)(3)(4)); //  Output: 24

Flow Execution:
multiply(2) returns a function that expects b.
multiply(2)(3) returns another function that expects c.
multiply(2)(3)(4) finally computes 2 * 3 * 4 = 24.

ðŸ”¹ Converting a Normal Function to Curried Function
Example: Without Currying
code
function calculateVolume(length, width, height) {
  return length * width * height;
}

console.log(calculateVolume(2, 3, 4)); // 24
Example: With Currying
code
function calculateVolume(length) {
  return function (width) {
    return function (height) {
      return length * width * height;
    };
  };
}

console.log(calculateVolume(2)(3)(4)); //  24
Here, each function takes only one argument and returns another function until all arguments are provided.

ðŸ”¹ Using ES6 Arrow Functions for Currying
We can simplify the syntax using arrow functions:

code
const add = a => b => c => a + b + c;

console.log(add(1)(2)(3)); //  6
This is a concise and readable way of writing curried functions.

ðŸ”¹ Partial Application vs Currying
Although similar, partial application is different from currying.

ðŸ”¹ Partial Application:

We pass only some arguments and return a new function.
Itâ€™s not necessarily 1 argument per function.
ðŸ”¹ Currying:

Transforms a function into a chain of single-argument functions.
Example: Partial Application
code
function multiply(a, b) {
  return a * b;
}

const double = multiply.bind(null, 2); // Fixes the first argument as 2
console.log(double(5)); //  10
Here, double(5) is equivalent to multiply(2, 5).

