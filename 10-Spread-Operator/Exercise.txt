1Ô∏è‚É£ Clone an array using spread
const numbers = [1, 2, 3, 4];
‚û°Ô∏è Clone the array without using slice() or Array.from().

2Ô∏è‚É£ Merge two arrays with spread

const fruits = ["apple", "banana"];
const veggies = ["carrot", "spinach"];
‚û°Ô∏è Combine them into one array.

3Ô∏è‚É£ Add new items while cloning
const colors = ["red", "blue"];
‚û°Ô∏è Clone it and add "green" at the end.

4Ô∏è‚É£ Spread a string into an array of characters
const word = "hello";
‚û°Ô∏è Convert it to ['h', 'e', 'l', 'l', 'o'].

5Ô∏è‚É£ Pass array elements as arguments using spread
const nums = [5, 10, 15];
‚û°Ô∏è Use spread to pass the numbers to Math.max().

6Ô∏è‚É£ Clone an object using spread
const user = { name: "Alice", age: 25 };
‚û°Ô∏è Create a new object without mutating user.

7Ô∏è‚É£ Merge two objects with spread


const obj1 = { a: 1, b: 2 };
const obj2 = { b: 3, c: 4 };
‚û°Ô∏è Combine them (notice what happens to b).

8Ô∏è‚É£ Update properties while cloning

const product = { name: "Laptop", price: 1000 };
‚û°Ô∏è Clone and update price to 1200.

9Ô∏è‚É£ Nested array clone issue

const nested = [[1, 2], [3, 4]];
‚û°Ô∏è Use spread to clone. Does it deep clone?

üîü Remove a property using spread & rest

const user = { name: "Bob", age: 30, password: "secret" };
‚û°Ô∏è Create a new object without password.

1Ô∏è‚É£1Ô∏è‚É£ Combine multiple objects & override keys
const base = { theme: "light", font: "Arial" };
const userPref = { theme: "dark" };
‚û°Ô∏è Merge them so user preferences take priority.

1Ô∏è‚É£2Ô∏è‚É£ Spread in function parameters

function logDetails(name, age, city) {
    console.log(name, age, city);
}
const details = ["Alice", 25, "Paris"];
‚û°Ô∏è Use spread to pass details to the function.

1Ô∏è‚É£3Ô∏è‚É£ Use spread in array destructuring
const numbers = [1, 2, 3, 4, 5];
‚û°Ô∏è Extract first two numbers, and gather the rest using ....

1Ô∏è‚É£4Ô∏è‚É£ Spread in default function parameters
function registerUser(details = {...}) {}
‚û°Ô∏è Use spread to create a default object for user registration.

1Ô∏è‚É£5Ô∏è‚É£ Tricky mutation test
const obj = { name: "Alice", hobbies: ["reading", "gaming"] };
const clone = { ...obj };
clone.hobbies.push("dancing");
‚û°Ô∏è What happens to obj.hobbies? Why?