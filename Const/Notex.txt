📌 JavaScript const 

🔹 What is const?
The const keyword is used to declare variables that cannot be reassigned.

Immutable binding: You cannot reassign a const variable.
Block-scoped: Similar to let, it is accessible only within the block where it is declared.
Not immutable objects: The variable reference is constant, but object properties can be modified.
🔹 Basic Example of const
code
const name = "Alice";
console.log(name); // ✅ Output: Alice

name = "Bob"; // ❌ Error: Assignment to constant variable
🚨 Once assigned, a const variable cannot be changed!

🔹 const is Block-Scoped
Like let, const is only accessible inside the block where it is declared.

code
if (true) {
  const age = 30;
  console.log(age); // ✅ Output: 30
}
console.log(age); // ❌ Error: age is not defined
🔹 const is NOT globally available if defined inside a block!

🔹 const with Objects (Mutable Properties)
🚨 const prevents reassignment, but it does not make objects immutable.

code
const person = { name: "Alice", age: 25 };
person.age = 26; // ✅ Allowed
console.log(person.age); // Output: 26

person = { name: "Bob", age: 30 }; // ❌ Error: Assignment to constant variable
✅ Object properties can be modified but the variable itself cannot be reassigned.

🔹 To fully freeze an object, use Object.freeze():

code
const car = { brand: "Toyota", model: "Camry" };
Object.freeze(car);

car.model = "Corolla"; // ❌ No effect (silently fails in non-strict mode)
console.log(car.model); // Output: Camry
🔹 const with Arrays (Mutable Elements)
code
const numbers = [1, 2, 3];
numbers.push(4); // ✅ Allowed
console.log(numbers); // Output: [1, 2, 3, 4]

numbers = [10, 20, 30]; // ❌ Error: Assignment to constant variable
✅ Array elements can be changed, but the reference cannot be reassigned.

🔹 When to Use const vs let vs var?
Feature	var	let	const
Reassignment	✅ Yes	✅ Yes	❌ No
Scope	Function-scoped	Block-scoped	Block-scoped
Hoisting	✅ Yes (undefined)	✅ Yes (TDZ)	✅ Yes (TDZ)
Can modify object/array properties?	✅ Yes	✅ Yes	✅ Yes
📌 Best Practice:

Use const by default.
Use let only when reassignment is needed.
Avoid var due to scope issues.


🎯 Summary
✅ const prevents reassignment but allows property modifications in objects and arrays.
✅ const is block-scoped, meaning it's only available inside the block where it's declared.
✅ Best practice: Use const by default unless you need to reassign, then use let.

