 JavaScript Modules

🔹 What are JavaScript Modules?
Modules help in organizing JavaScript code into separate files, improving maintainability and reusability.

 Advantages of Modules:
✔️ Encapsulation: Prevents global scope pollution.
✔️ Reusability: Code can be reused across multiple files.
✔️ Maintainability: Large codebases are easier to manage.

🔹 Exporting and Importing Modules
 Named Exports & Imports

Exporting multiple values from a module

code
// math.js (Module file)
export const PI = 3.1416;
export function add(a, b) {
    return a + b;
}
export function multiply(a, b) {
    return a * b;
}
 Importing specific values from a module

code
// main.js
import { PI, add } from './math.js';

console.log(PI); //  Output: 3.1416
console.log(add(5, 10)); //  Output: 15

Default Exports & Imports

Exporting a default function

code
// greet.js
export default function greet(name) {
    return `Hello, ${name}!`;
}
 Importing the default export

code
// main.js
import greet from './greet.js';

console.log(greet("Alice")); //  Output: Hello, Alice!


 Renaming Imports and Exports

code
// utils.js
export function fetchData() {
    return "Fetching data...";
}
export function processData() {
    return "Processing data...";
}
 Renaming imports

code
// main.js
import { fetchData as getData, processData as handleData } from './utils.js';

console.log(getData()); //  Output: Fetching data...
console.log(handleData()); //  Output: Processing data...
🔹 Dynamic Imports (Lazy Loading)

Load modules dynamically using import()

code
async function loadModule() {
    const module = await import('./math.js');
    console.log(module.add(4, 5)); //  Output: 9
}
loadModule();
Use Case: Load a module only when needed (e.g., button click)

code
document.querySelector("button").addEventListener("click", async () => {
    const { greet } = await import('./greet.js');
    console.log(greet("Bob")); //  Output: Hello, Bob!
});

🔹 CommonJS vs. ES Modules
Feature	            CommonJS (Node.js)	        ES Modules (Modern JS)
Syntax	            require() / module.exports	import / export
Loading	            Synchronous	                Asynchronous
Use Case	        Node.js	                    Browsers & Modern JS

CommonJS Example (Node.js)

code
// math.js
module.exports = {
    add: (a, b) => a + b,
};

code
// main.js
const math = require('./math.js');
console.log(math.add(2, 3)); // Output: 5

 ES Module Example (Modern JS)

code
// math.js
export function add(a, b) {
    return a + b;
}
code
// main.js
import { add } from './math.js';
console.log(add(2, 3)); //  Output: 5


Summary
 Modules help in organizing, maintaining, and reusing code.
 Use export and import to share and use functions, variables, and objects.
 Default exports allow exporting one value per module, while named exports allow multiple.
 Dynamic imports (import()) load modules on demand.

