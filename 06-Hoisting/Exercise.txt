Beginner ‚Äì Foundation Builders
(Basics of how var, let, const, and functions behave with hoisting)

1Ô∏è‚É£ What will this log? Why?
console.log(a);
var a = 10;


2Ô∏è‚É£ What‚Äôs the output? Explain hoisting here.
console.log(b);
let b = 5;

3Ô∏è‚É£ What happens here?
sayHello();
function sayHello() {
  console.log("Hello!");
}

4Ô∏è‚É£ Predict the output:
greet();
var greet = function() {
  console.log("Hi there!");
};

5Ô∏è‚É£ Will this code throw an error or print something?
console.log(num);
const num = 50;

 Intermediate ‚Äì Deeper Hoisting Logic
6Ô∏è‚É£ Explain the difference in hoisting between these two cases:

foo();
function foo() {
  console.log("Function Declaration");
}

bar();
var bar = function() {
  console.log("Function Expression");
};

7Ô∏è‚É£ What happens when you use var inside an if block?
if (true) {
  var x = 100;
}
console.log(x);

8Ô∏è‚É£ Does this throw an error or print something?
if (true) {
  console.log(y);
  let y = 200;
}

9Ô∏è‚É£ How does hoisting work in a for loop with var?
for (var i = 0; i < 3; i++) {
  console.log(i);
}
console.log("After loop:", i);

üîü How does hoisting work in a for loop with let?
for (let j = 0; j < 3; j++) {
  console.log(j);
}
console.log("After loop:", j);

Advanced ‚Äì Real-World Style Challenges
1Ô∏è‚É£1Ô∏è‚É£ Explain the Temporal Dead Zone in this code:
console.log(message);
let message = "Hello TDZ!";


1Ô∏è‚É£2Ô∏è‚É£ Predict the output & explain step-by-step:
function test() {
  console.log(a);
  var a = 1;
  console.log(b);
  let b = 2;
}
test();

1Ô∏è‚É£3Ô∏è‚É£ What will be logged and why?
function check() {
  console.log(myVar);
  var myVar = "I am var";
  console.log(myLet);
  let myLet = "I am let";
}
check();

1Ô∏è‚É£4Ô∏è‚É£ Function & variable hoisting combo:
hoistMe();
var hoistMe = 20;
function hoistMe() {
  console.log("Hoisted function!");
}
console.log(hoistMe);

1Ô∏è‚É£5Ô∏è‚É£ Hoisting inside nested functions:
function outer() {
  console.log(innerVar);
  var innerVar = "outer var";

  function inner() {
    console.log(innerVar);
    var innerVar = "inner var";
  }

  inner();
}
outer();