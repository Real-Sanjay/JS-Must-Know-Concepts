1Ô∏è‚É£ Create an object and access properties
const car = { brand: "Toyota", model: "Corolla", year: 2020 };

//  Accessing properties
console.log(car.brand); // "Toyota"
console.log(car.year);  // 2020
 Explanation: Dot notation (car.brand) is the simplest way to access object values.

2Ô∏è‚É£ Add a new property to an object
const user = { name: "Alice", age: 25 };
// Adding a new property
user.city = "New York";
console.log(user); // { name: "Alice", age: 25, city: "New York" }
 Tip: You can also use user["city"] = "New York" if property name is dynamic.

3Ô∏è‚É£ Delete a property from an object
const product = { name: "Laptop", price: 1000, discount: 100 };

//  Deleting a property
delete product.discount;
console.log(product); // { name: "Laptop", price: 1000 }
 Note: delete removes a key permanently.

4Ô∏è‚É£ Check if a property exists in an object
const book = { title: "1984", author: "Orwell" };
// Using 'in' keyword
console.log("pages" in book);  // false
console.log("author" in book); // true
 Alternative: Use book.hasOwnProperty("author").

5Ô∏è‚É£ Count the number of properties in an object
const student = { name: "John", age: 21, grade: "A" };

//  Counting keys
console.log(Object.keys(student).length); // 3
 Why Object.keys()? It returns an array of all keys.

6Ô∏è‚É£ Convert an object to an array of keys and values
const person = { name: "Mike", job: "Engineer", country: "USA" };

//  Convert to array of arrays
console.log(Object.entries(person));
// [["name", "Mike"], ["job", "Engineer"], ["country", "USA"]]

7Ô∏è‚É£ Merge two objects

const obj1 = { a: 1, b: 2 };
const obj2 = { b: 3, c: 4 };

//  Using spread operator
const merged = { ...obj1, ...obj2 };
console.log(merged); // { a: 1, b: 3, c: 4 } Note: If keys overlap (b), the second object‚Äôs value overwrites the first.

note: Use Object.assign if you want merge into a single object Object.assign(obj1, obj2)


8Ô∏è‚É£ Get all keys and values from an object
const movie = { title: "Inception", director: "Nolan", year: 2010 };

//  Keys & values separately
console.log(Object.keys(movie));   // ["title", "director", "year"]
console.log(Object.values(movie)); // ["Inception", "Nolan", 2010]

9Ô∏è‚É£ Find the property with the highest value
const scores = { Alice: 50, Bob: 75, Charlie: 60 };

//  Find top scorer
let topPlayer = "";
let topScore = 0;

for (const key in scores) {
  if (scores[key] > topScore) {
    topScore = scores[key];
    topPlayer = key;
  }
}

console.log(topPlayer); // "Bob"

üîü Swap keys and values in an object
const roles = { admin: 1, user: 2, guest: 3 };
const swapped = {};
for (const key in roles) {
  swapped[roles[key]] = key;
}

console.log(swapped);
// { 1: "admin", 2: "user", 3: "guest" }


1Ô∏è‚É£1Ô∏è‚É£ Clone an object without reference issues
const original = { x: 10, y: 20 };

// Shallow copy
const copy = { ...original };
copy.x = 99;

console.log(original); // { x: 10, y: 20 }
console.log(copy);     // { x: 99, y: 20 }
 Why spread? It avoids shared references. Can also use JSON.parse(JSON.Stringify(obj)) or Object.create(obj);

1Ô∏è‚É£2Ô∏è‚É£ Find all properties with a certain value
const data = { a: 1, b: 2, c: 1, d: 3 };

const keysWith1 = Object.keys(data).filter(key => data[key] === 1);
console.log(keysWith1); // ["a", "c"]

1Ô∏è‚É£3Ô∏è‚É£ Filter properties from an object
const person = { name: "Tom", age: 25, password: "secret123" };
// Remove password
const { password, ...safePerson } = person;
console.log(safePerson); // { name: "Tom", age: 25 }

1Ô∏è‚É£4Ô∏è‚É£ Count how many times each value appears in object values

const colors = { item1: "red", item2: "blue", item3: "red", item4: "green" };
const frequency = {};
Object.values(colors).forEach(color => {
  frequency[color] = (frequency[color] || 0) + 1;
});

console.log(frequency); // { red: 2, blue: 1, green: 1 }

1Ô∏è‚É£5Ô∏è‚É£ Group objects by a property

const users = [
  { name: "Alice", role: "admin" },
  { name: "Bob", role: "user" },
  { name: "Charlie", role: "admin" },
  { name: "Dave", role: "user" }
];

const grouped = {};
users.forEach(user => {
  if (!grouped[user.role]) {
    grouped[user.role] = [];
  }
  grouped[user.role].push({ name: user.name });
});

console.log(grouped);
// { admin: [{ name: "Alice" }, { name: "Charlie" }],
//   user: [{ name: "Bob" }, { name: "Dave" }] }


1Ô∏è‚É£6Ô∏è‚É£ Deep clone a nested object
const obj = { a: 1, b: { c: 2 } };

// Deep copy using JSON (simple but works)
const deepCopy = JSON.parse(JSON.stringify(obj));

deepCopy.b.c = 99;
console.log(obj);      // { a: 1, b: { c: 2 } }
console.log(deepCopy); // { a: 1, b: { c: 99 } }
 Note: JSON method fails for functions & Dates 

1Ô∏è‚É£7Ô∏è‚É£ Remove all properties with falsy values
const data = { a: 0, b: "hello", c: false, d: "", e: 42, f: null };

const cleaned = {};
for (const key in data) {
  if (data[key]) cleaned[key] = data[key];
}
console.log(cleaned); // { b: "hello", e: 42 }

1Ô∏è‚É£8Ô∏è‚É£ Freeze an object to prevent changes
const config = { apiKey: "12345", version: 1 };

Object.freeze(config);
config.version = 2; // Won‚Äôt change throws error

console.log(config); // { apiKey: "12345", version: 1 }

1Ô∏è‚É£9Ô∏è‚É£ Custom Object.myKeys() method
Object.myKeys = function(obj) {
  const keys = [];
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) keys.push(key);
  }
  return keys;
};

console.log(Object.myKeys({ a: 1, b: 2 })); // ["a", "b"]

2Ô∏è‚É£0Ô∏è‚É£ Compare two objects deeply

function deepEqual(obj1, obj2) {
  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);

  if (keys1.length !== keys2.length) return false;

  for (const key of keys1) {
    const val1 = obj1[key];
    const val2 = obj2[key];

    if (typeof val1 === "object" && typeof val2 === "object") {
      if (!deepEqual(val1, val2)) return false;
    } else if (val1 !== val2) {
      return false;
    }
  }
  return true;
}

const obj1 = { a: 1, b: { c: 2 } };
const obj2 = { a: 1, b: { c: 2 } };

console.log(deepEqual(obj1, obj2)); // true