1Ô∏è‚É£ Create an object and access properties
const car = { brand: "Toyota", model: "Corolla", year: 2020 };
‚û°Ô∏è Get the brand and year from the object.

2Ô∏è‚É£ Add a new property to an object
const user = { name: "Alice", age: 25 };
‚û°Ô∏è Add a city property with value "New York".

3Ô∏è‚É£ Delete a property from an object
const product = { name: "Laptop", price: 1000, discount: 100 };
‚û°Ô∏è Remove the discount property.

4Ô∏è‚É£ Check if a property exists in an object
const book = { title: "1984", author: "Orwell" };
‚û°Ô∏è Check if pages exists in the book object.

5Ô∏è‚É£ Count the number of properties in an object
const student = { name: "John", age: 21, grade: "A" };
‚û°Ô∏è Find how many keys the object has.

6Ô∏è‚É£ Convert an object to an array of keys and values
const person = { name: "Mike", job: "Engineer", country: "USA" };
‚û°Ô∏è Output: [["name", "Mike"], ["job", "Engineer"], ["country", "USA"]]

7Ô∏è‚É£ Merge two objects
const obj1 = { a: 1, b: 2 };
const obj2 = { b: 3, c: 4 };
‚û°Ô∏è Merge into { a: 1, b: 3, c: 4 }.


8Ô∏è‚É£ Get all keys and values from an object
const movie = { title: "Inception", director: "Nolan", year: 2010 };
‚û°Ô∏è Print keys and values separately.

9Ô∏è‚É£ Find the property with the highest value
const scores = { Alice: 50, Bob: 75, Charlie: 60 };
‚û°Ô∏è Output: "Bob" (highest score).

üîü Swap keys and values in an object
const roles = { admin: 1, user: 2, guest: 3 };
‚û°Ô∏è Output: { 1: "admin", 2: "user", 3: "guest" }.

1Ô∏è‚É£1Ô∏è‚É£ Clone an object without reference issues
const original = { x: 10, y: 20 };
‚û°Ô∏è Create an independent copy.

1Ô∏è‚É£2Ô∏è‚É£ Find all properties with a certain value
const data = { a: 1, b: 2, c: 1, d: 3 };
‚û°Ô∏è Get all keys that have value 1.

1Ô∏è‚É£3Ô∏è‚É£ Filter properties from an object
const person = { name: "Tom", age: 25, password: "secret123" };
‚û°Ô∏è Return a new object without the password key.

1Ô∏è‚É£4Ô∏è‚É£ Count how many times each value appears in object values
const colors = { item1: "red", item2: "blue", item3: "red", item4: "green" };
‚û°Ô∏è Output: { red: 2, blue: 1, green: 1 }.

1Ô∏è‚É£5Ô∏è‚É£ Group objects by a property
const users = [
  { name: "Alice", role: "admin" },
  { name: "Bob", role: "user" },
  { name: "Charlie", role: "admin" },
  { name: "Dave", role: "user" }
];
‚û°Ô∏è Output:
{
  admin: [{ name: "Alice" }, { name: "Charlie" }],
  user: [{ name: "Bob" }, { name: "Dave" }]
}


1Ô∏è‚É£6Ô∏è‚É£ Deep clone a nested object
const obj = { a: 1, b: { c: 2 } };
‚û°Ô∏è Clone it so changing obj.b.c doesn‚Äôt affect the copy.

1Ô∏è‚É£7Ô∏è‚É£ Remove all properties with falsy values
const data = { a: 0, b: "hello", c: false, d: "", e: 42, f: null };
‚û°Ô∏è Output: { b: "hello", e: 42 }.

1Ô∏è‚É£8Ô∏è‚É£ Freeze an object to prevent changes
const config = { apiKey: "12345", version: 1 };
‚û°Ô∏è Make sure it can‚Äôt be modified (use Object.freeze).

1Ô∏è‚É£9Ô∏è‚É£ Write a custom Object.myKeys() method
Object.myKeys = function(obj) {
  // your logic here
};
‚û°Ô∏è Should work like Object.keys().

2Ô∏è‚É£0Ô∏è‚É£ Write a function to compare two objects deeply
const obj1 = { a: 1, b: { c: 2 } };
const obj2 = { a: 1, b: { c: 2 } };
‚û°Ô∏è Return true if they are equal.